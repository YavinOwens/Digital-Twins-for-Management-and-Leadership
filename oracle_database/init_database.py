"""
Database Initialization Script for Web Knowledge System
Creates tables, indexes, and initial data for the Oracle Database
"""

import oracledb
import logging
from typing import List, Dict, Any
from .database_config import config

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseInitializer:
    """Handles database initialization for the Web Knowledge System"""
    
    def __init__(self, connection_config: Dict[str, Any] = None):
        self.config = connection_config or config.get_app_connection_config()
        self.connection = None
        
    def connect(self) -> bool:
        """Establish connection to Oracle Database"""
        try:
            dsn = f"{self.config['host']}:{self.config['port']}/{self.config['service_name']}"
            self.connection = oracledb.connect(
                user=self.config['username'],
                password=self.config['password'],
                dsn=dsn
            )
            logger.info("Successfully connected to Oracle Database")
            return True
        except oracledb.Error as e:
            logger.error(f"Failed to connect to Oracle Database: {e}")
            return False
    
    def disconnect(self):
        """Close database connection"""
        if self.connection:
            self.connection.close()
            logger.info("Disconnected from Oracle Database")
    
    def execute_sql(self, sql: str, params: Dict[str, Any] = None) -> bool:
        """Execute SQL statement"""
        try:
            cursor = self.connection.cursor()
            if params:
                cursor.execute(sql, params)
            else:
                cursor.execute(sql)
            self.connection.commit()
            cursor.close()
            return True
        except oracledb.Error as e:
            logger.error(f"SQL execution failed: {e}")
            logger.error(f"SQL: {sql}")
            return False
    
    def table_exists(self, table_name: str) -> bool:
        """Check if a table exists"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("""
                SELECT COUNT(*) 
                FROM user_tables 
                WHERE table_name = UPPER(:table_name)
            """, {"table_name": table_name})
            count = cursor.fetchone()[0]
            cursor.close()
            return count > 0
        except oracledb.Error as e:
            logger.error(f"Error checking if table {table_name} exists: {e}")
            return False

    def create_tables(self) -> bool:
        """Create all necessary tables for the Web Knowledge System"""
        
        tables_sql = [
            # Documents table
            """
            CREATE TABLE documents (
                document_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                filename VARCHAR2(500) NOT NULL,
                file_path VARCHAR2(1000) NOT NULL,
                file_type VARCHAR2(50),
                file_size NUMBER,
                upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                processed_date TIMESTAMP,
                status VARCHAR2(20) DEFAULT 'UPLOADED',
                metadata CLOB,
                content_hash VARCHAR2(64),
                created_by VARCHAR2(100),
                CONSTRAINT chk_doc_status CHECK (status IN ('UPLOADED', 'PROCESSING', 'PROCESSED', 'ERROR'))
            )
            """,
            
            # Document chunks for vector storage
            """
            CREATE TABLE document_chunks (
                chunk_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                document_id NUMBER NOT NULL,
                chunk_text CLOB NOT NULL,
                chunk_index NUMBER NOT NULL,
                chunk_size NUMBER,
                embedding_vector CLOB,
                metadata CLOB,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT fk_chunk_doc FOREIGN KEY (document_id) REFERENCES documents(document_id) ON DELETE CASCADE
            )
            """,
            
            # Agent tasks
            """
            CREATE TABLE agent_tasks (
                task_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                task_name VARCHAR2(200) NOT NULL,
                task_type VARCHAR2(50) NOT NULL,
                description CLOB,
                status VARCHAR2(20) DEFAULT 'PENDING',
                priority NUMBER DEFAULT 5,
                assigned_agent VARCHAR2(100),
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                started_date TIMESTAMP,
                completed_date TIMESTAMP,
                result_data CLOB,
                error_message CLOB,
                CONSTRAINT chk_task_status CHECK (status IN ('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED'))
            )
            """,
            
            # Workflow executions
            """
            CREATE TABLE workflow_executions (
                execution_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                workflow_name VARCHAR2(200) NOT NULL,
                workflow_type VARCHAR2(50) NOT NULL,
                status VARCHAR2(20) DEFAULT 'STARTED',
                started_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_date TIMESTAMP,
                total_tasks NUMBER DEFAULT 0,
                completed_tasks NUMBER DEFAULT 0,
                failed_tasks NUMBER DEFAULT 0,
                execution_data CLOB,
                result_summary CLOB,
                CONSTRAINT chk_wf_status CHECK (status IN ('STARTED', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED'))
            )
            """,
            
            # Memory storage for AI agents
            """
            CREATE TABLE agent_memory (
                memory_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                agent_name VARCHAR2(100) NOT NULL,
                memory_type VARCHAR2(50) NOT NULL,
                memory_key VARCHAR2(200) NOT NULL,
                memory_value CLOB NOT NULL,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_accessed TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                access_count NUMBER DEFAULT 0,
                expires_date TIMESTAMP,
                CONSTRAINT uk_agent_memory UNIQUE (agent_name, memory_type, memory_key)
            )
            """,
            
            # Research results
            """
            CREATE TABLE research_results (
                result_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                research_topic VARCHAR2(500) NOT NULL,
                research_type VARCHAR2(50) NOT NULL,
                result_data CLOB NOT NULL,
                sources CLOB,
                confidence_score NUMBER(3,2),
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_by VARCHAR2(100),
                status VARCHAR2(20) DEFAULT 'ACTIVE',
                CONSTRAINT chk_research_status CHECK (status IN ('ACTIVE', 'ARCHIVED', 'DELETED'))
            )
            """,
            
            # User sessions and interactions
            """
            CREATE TABLE user_sessions (
                session_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                session_token VARCHAR2(200) UNIQUE NOT NULL,
                user_id VARCHAR2(100),
                session_data CLOB,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_date TIMESTAMP,
                is_active CHAR(1) DEFAULT 'Y',
                CONSTRAINT chk_session_active CHECK (is_active IN ('Y', 'N'))
            )
            """,
            
            # System configuration
            """
            CREATE TABLE system_config (
                config_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                config_key VARCHAR2(200) UNIQUE NOT NULL,
                config_value CLOB NOT NULL,
                config_type VARCHAR2(50) DEFAULT 'STRING',
                description VARCHAR2(500),
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active CHAR(1) DEFAULT 'Y',
                CONSTRAINT chk_config_active CHECK (is_active IN ('Y', 'N'))
            )
            """
        ]
        
        logger.info("Creating database tables...")
        
        table_names = [
            "documents", "document_chunks", "agent_tasks", "workflow_executions",
            "agent_memory", "research_results", "user_sessions", "system_config"
        ]
        
        for i, (sql, table_name) in enumerate(zip(tables_sql, table_names), 1):
            if self.table_exists(table_name):
                logger.info(f"Table {table_name} already exists - skipping")
                continue
                
            logger.info(f"Creating table {i}/{len(tables_sql)}: {table_name}")
            if not self.execute_sql(sql):
                logger.error(f"Failed to create table {table_name}")
                return False
        
        logger.info("All tables created successfully")
        return True
    
    def create_indexes(self) -> bool:
        """Create indexes for better performance"""
        
        indexes_sql = [
            "CREATE INDEX idx_documents_status ON documents(status)",
            "CREATE INDEX idx_documents_upload_date ON documents(upload_date)",
            "CREATE INDEX idx_documents_file_type ON documents(file_type)",
            "CREATE INDEX idx_document_chunks_doc_id ON document_chunks(document_id)",
            "CREATE INDEX idx_agent_tasks_status ON agent_tasks(status)",
            "CREATE INDEX idx_agent_tasks_agent ON agent_tasks(assigned_agent)",
            "CREATE INDEX idx_agent_tasks_created_date ON agent_tasks(created_date)",
            "CREATE INDEX idx_workflow_executions_status ON workflow_executions(status)",
            "CREATE INDEX idx_workflow_executions_started_date ON workflow_executions(started_date)",
            "CREATE INDEX idx_agent_memory_agent ON agent_memory(agent_name)",
            "CREATE INDEX idx_agent_memory_type ON agent_memory(memory_type)",
            "CREATE INDEX idx_agent_memory_key ON agent_memory(memory_key)",
            "CREATE INDEX idx_research_results_topic ON research_results(research_topic)",
            "CREATE INDEX idx_research_results_type ON research_results(research_type)",
            "CREATE INDEX idx_research_results_created_date ON research_results(created_date)",
            "CREATE INDEX idx_user_sessions_token ON user_sessions(session_token)",
            "CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id)",
            "CREATE INDEX idx_system_config_key ON system_config(config_key)"
        ]
        
        logger.info("Creating database indexes...")
        
        for i, sql in enumerate(indexes_sql, 1):
            logger.info(f"Creating index {i}/{len(indexes_sql)}")
            if not self.execute_sql(sql):
                logger.warning(f"Failed to create index {i} - continuing...")
        
        logger.info("Index creation completed")
        return True
    
    def insert_initial_data(self) -> bool:
        """Insert initial configuration data"""
        
        initial_configs = [
            ("app_name", "Web Knowledge System", "STRING", "Application name"),
            ("app_version", "1.0.0", "STRING", "Application version"),
            ("max_file_size", "104857600", "NUMBER", "Maximum file size in bytes (100MB)"),
            ("supported_file_types", "pdf,txt,docx,md", "STRING", "Supported file types"),
            ("vector_embedding_model", "text-embedding-ada-002", "STRING", "Default embedding model"),
            ("max_chunk_size", "1000", "NUMBER", "Maximum chunk size for document processing"),
            ("chunk_overlap", "200", "NUMBER", "Overlap between document chunks"),
            ("default_agent_timeout", "300", "NUMBER", "Default agent timeout in seconds"),
            ("enable_ai_features", "true", "BOOLEAN", "Enable AI-powered features"),
            ("database_version", "23ai", "STRING", "Oracle Database version")
        ]
        
        logger.info("Inserting initial configuration data...")
        
        insert_sql = """
        INSERT INTO system_config (config_key, config_value, config_type, description)
        VALUES (:key, :value, :type, :description)
        """
        
        for config_item in initial_configs:
            params = {
                'key': config_item[0],
                'value': config_item[1],
                'type': config_item[2],
                'description': config_item[3]
            }
            
            if not self.execute_sql(insert_sql, params):
                logger.warning(f"Failed to insert config: {config_item[0]}")
        
        logger.info("Initial data insertion completed")
        return True
    
    def create_sequences(self) -> bool:
        """Create sequences for ID generation"""
        
        sequences_sql = [
            "CREATE SEQUENCE seq_document_id START WITH 1000 INCREMENT BY 1",
            "CREATE SEQUENCE seq_chunk_id START WITH 1000 INCREMENT BY 1",
            "CREATE SEQUENCE seq_task_id START WITH 1000 INCREMENT BY 1",
            "CREATE SEQUENCE seq_execution_id START WITH 1000 INCREMENT BY 1",
            "CREATE SEQUENCE seq_memory_id START WITH 1000 INCREMENT BY 1",
            "CREATE SEQUENCE seq_result_id START WITH 1000 INCREMENT BY 1",
            "CREATE SEQUENCE seq_session_id START WITH 1000 INCREMENT BY 1",
            "CREATE SEQUENCE seq_config_id START WITH 1000 INCREMENT BY 1"
        ]
        
        logger.info("Creating sequences...")
        
        for i, sql in enumerate(sequences_sql, 1):
            logger.info(f"Creating sequence {i}/{len(sequences_sql)}")
            if not self.execute_sql(sql):
                logger.warning(f"Failed to create sequence {i} - continuing...")
        
        logger.info("Sequence creation completed")
        return True
    
    def initialize_database(self) -> bool:
        """Complete database initialization"""
        logger.info("Starting database initialization...")
        
        if not self.connect():
            return False
        
        try:
            # Create tables
            if not self.create_tables():
                return False
            
            # Create indexes
            if not self.create_indexes():
                logger.warning("Some indexes failed to create, but continuing...")
            
            # Create sequences
            if not self.create_sequences():
                logger.warning("Some sequences failed to create, but continuing...")
            
            # Insert initial data
            if not self.insert_initial_data():
                logger.warning("Some initial data failed to insert, but continuing...")
            
            logger.info("Database initialization completed successfully!")
            return True
            
        except Exception as e:
            logger.error(f"Database initialization failed: {e}")
            return False
        finally:
            self.disconnect()

def main():
    """Main function to initialize the database"""
    print("Web Knowledge System - Database Initialization")
    print("=" * 50)
    
    initializer = DatabaseInitializer()
    
    if initializer.initialize_database():
        print("\n✅ Database initialization completed successfully!")
        print("\nYou can now use the Web Knowledge System with Oracle Database 23ai.")
    else:
        print("\n❌ Database initialization failed!")
        print("Please check the logs and try again.")

if __name__ == "__main__":
    main()
